"use client";

import { useState } from "react";
import type { DeployCreateRequest } from "@/lib/sealos/deploy/schemas/req-res-schemas/req-res-create-schemas";
import { Button } from "@/components/ui/button";
import {
  createDeployContext,
  generateDeployName,
} from "@/lib/sealos/deploy/deploy-utils";
// AuthContext not required
import { useCreateDeployMutation } from "@/lib/sealos/deploy/deploy-mutation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
// Plus icon removed; not needed

export default function AddDeploy() {
  const [image, setImage] = useState("");
  const [port, setPort] = useState<number>(80);
  const [created, setCreated] = useState<boolean>(false);

  // Create the context and mutation hook
  const deployContext = createDeployContext();
  const createDeployMutation = useCreateDeployMutation(deployContext);

  // no handlers needed for arrays

  const handleCreate = () => {
    if (!image) return;

    const request: DeployCreateRequest = {
      name: generateDeployName(),
      image,
      env: {},
      ports: [{ number: port, publicAccess: true }],
    };

    createDeployMutation.mutate(request, {
      onSuccess: () => {
        setCreated(true);
      },
      onError: (error) => {
        console.error("Failed to create deployment:", error);
      },
    });
  };

  return (
    <div className="space-y-4 p-1">
      {/* No name input - autogenerated */}

      {/* Container image */}
      <div className="flex flex-col gap-2">
        <Input
          id="container-image"
          value={image}
          onChange={(e) => setImage(e.target.value)}
          placeholder="e.g., nginx:latest, node:18-alpine"
          className="text-sm"
        />
      </div>

      {/* Port */}
      <div className="flex flex-col gap-2">
        <Label htmlFor="port-number" className="text-xs font-medium">
          Port Number
        </Label>
        <Input
          id="port-number"
          type="number"
          min="1"
          max="65535"
          value={port}
          onChange={(e) => setPort(parseInt(e.target.value) || 80)}
          placeholder="80"
          className="text-sm"
        />
      </div>

      {/* Environment Variables */}
      {/* Remove env var section */}

      <Button
        className="mt-4 w-full"
        onClick={handleCreate}
        disabled={createDeployMutation.isPending || !image || created}
      >
        {created
          ? "Created"
          : createDeployMutation.isPending
          ? "Creating..."
          : "Create Deployment"}
      </Button>
    </div>
  );
}
